{"mappings":"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","sources":["./src/game.ts","./src/minesweeperLayout.ts","./src/renderer.ts","./src/index.ts"],"sourcesContent":["export class UnknownCell {\n    constructor(readonly marked: boolean) {\n    }\n}\n\nexport class OpenCell {\n    constructor(readonly mineCount: number) {\n    }\n}\n\nexport class ExplodedCell { }\n\nexport type CellCoords = { x: number, y: number };\n\nexport class Game {\n    private stateMap: (undefined | 'marked' | 'revealed')[][];\n    private mineMap: ('bomb' | number)[][] | null;\n    private remainingToOpen: number;\n    private gameConclusion: (null | 'win' | 'loss');\n\n    constructor(readonly width: number, readonly height: number, readonly mineCount: number) {\n        this.remainingToOpen = width * height - mineCount;\n        this.gameConclusion = null;\n\n        this.stateMap = new Array(height);\n        for (let y = 0; y < height; y++)\n            this.stateMap[y] = new Array(width);\n\n        this.mineMap = null;\n    }\n\n    get conclusion(): null | 'win' | 'loss' { return this.gameConclusion; }\n\n    getCellAt(x: number, y: number): UnknownCell | ExplodedCell | OpenCell {\n        const state = this.stateMap[y][x];\n\n        if (state !== 'revealed')\n            return new UnknownCell(state === 'marked');\n\n        if (!this.mineMap) throw 'mineMap should be initialized before any cell state is revealed.';\n        const contents = this.mineMap[y][x];\n        return contents === 'bomb' ? new ExplodedCell() : new OpenCell(contents);\n    }\n\n    tryToggleMark(x: number, y: number): boolean {\n        const state = this.stateMap[y][x];\n        if (state === 'revealed') return false;\n\n        this.stateMap[y][x] = state === 'marked' ? undefined : 'marked';\n        return true;\n    }\n\n    tryOpen(x: number, y: number): boolean {\n        const state = this.stateMap[y][x];\n        if (state === 'revealed' || state === 'marked') return false;\n\n        if (this.mineMap === null)\n            this.initializeMines({ x, y });\n\n        if (!this.mineMap) throw 'mineMap should be initialized before any cell state is revealed.';\n        const contents = this.mineMap[y][x];\n\n        if (contents === 'bomb')\n            this.explode();\n        else\n            this.openKnownGoodCell(x, y);\n\n        return true;\n    }\n\n    openSurroundingIfSatisfied(x: number, y: number): boolean {\n        const cell = this.getCellAt(x, y);\n\n        if (cell instanceof OpenCell) {\n            const surroundingCoords = this.getSurroundingCoordinates(x, y);\n\n            const openable = new Array<CellCoords>();\n            let markCount = 0;\n\n            for (let i = 0; i < surroundingCoords.length; i++) {\n                const coords = surroundingCoords[i];\n                const state = this.stateMap[coords.y][coords.x];\n\n                if (state === 'marked') {\n                    markCount++;\n                } else if (state !== 'revealed') {\n                    openable.push(coords);\n                }\n            }\n\n            if (markCount === cell.mineCount) {\n                for (let i = 0; i < openable.length; i++) {\n                    const coords = openable[i];\n                    this.tryOpen(coords.x, coords.y);\n                    if (this.gameConclusion) break;\n                }\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private initializeMines(guaranteedCell: CellCoords) {\n        this.mineMap = new Array(this.height);\n        for (let y = 0; y < this.height; y++)\n            this.mineMap[y] = new Array(this.width).fill(0);\n\n        for (let plantedCount = 0; plantedCount < this.mineCount;) {\n            const x = Math.floor(Math.random() * this.width);\n            const y = Math.floor(Math.random() * this.height);\n\n            if (Math.abs(x - guaranteedCell.x) <= 1 && Math.abs(y - guaranteedCell.y) <= 1) continue;\n            if (this.mineMap[y][x] === 'bomb') continue;\n\n            this.mineMap[y][x] = 'bomb';\n\n            const allSurrounding = this.getSurroundingCoordinates(x, y);\n            for (let i = 0; i < allSurrounding.length; i++) {\n                const surrounding = allSurrounding[i];\n                const contents = this.mineMap[surrounding.y][surrounding.x];\n                if (contents !== 'bomb')\n                    this.mineMap[surrounding.y][surrounding.x] = contents + 1;\n            }\n\n            plantedCount++;\n        }\n\n        console.log(this.mineMap);\n    }\n\n    private explode() {\n        if (!this.mineMap) throw 'mineMap should be initialized before any cell state is revealed.';\n\n        this.gameConclusion = 'loss';\n\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                if (this.mineMap[y][x] === 'bomb') {\n                    this.stateMap[y][x] = 'revealed';\n                }\n            }\n        }\n    }\n\n    private openKnownGoodCell(x: number, y: number) {\n        if (!this.mineMap) throw 'mineMap should be initialized before any cell state is revealed.';\n\n        let knownGoodCells = [{ x, y }];\n\n        for (;;) {\n            const cell = knownGoodCells.pop();\n            if (!cell) break;\n\n            const state = this.stateMap[cell.y][cell.x];\n            if (state === 'marked' || state === 'revealed') continue;\n\n            this.stateMap[cell.y][cell.x] = 'revealed';\n\n            this.remainingToOpen--;\n            if (this.remainingToOpen === 0) {\n                this.gameConclusion = 'win';\n                break;\n            }\n\n            if (this.mineMap[cell.y][cell.x] === 0)\n                knownGoodCells = knownGoodCells.concat(this.getSurroundingCoordinates(cell.x, cell.y));\n        }\n    }\n\n    private getSurroundingCoordinates(x: number, y: number) {\n        const coordinates = new Array<CellCoords>();\n\n        if (y > 0)\n            coordinates.push({ x, y: y - 1 });\n        if (y < this.height - 1)\n            coordinates.push({ x, y: y + 1 });\n\n        if (x > 0) {\n            coordinates.push({ x: x - 1, y });\n            if (y > 0)\n                coordinates.push({ x: x - 1, y: y - 1 });\n            if (y < this.height - 1)\n                coordinates.push({ x: x - 1, y: y + 1 });\n        }\n\n        if (x < this.width - 1) {\n            coordinates.push({ x: x + 1, y });\n            if (y > 0)\n                coordinates.push({ x: x + 1, y: y - 1 });\n            if (y < this.height - 1)\n                coordinates.push({ x: x + 1, y: y + 1 });\n        }\n\n        return coordinates;\n    }\n}\n","export type Rectangle = { x: number, y: number, width: number, height: number };\n\nexport class MinesweeperLayout {\n    readonly renderSize: { width: number, height: number };\n    readonly gameSize: { width: number, height: number };\n    readonly cellSize: number;\n    readonly minefieldBounds: Rectangle;\n\n    constructor(renderWidth: number, renderHeight: number, gameWidth: number, gameHeight: number) {\n        this.renderSize = { width: renderWidth, height: renderHeight };\n        this.gameSize = { width: gameWidth, height: gameHeight };\n\n        const outerBounds = { x: 0, y: 0, width: this.renderSize.width, height: this.renderSize.height };\n        const aspect = { width: gameWidth, height: gameHeight };\n        this.minefieldBounds = MinesweeperLayout.fitRectangle(aspect, outerBounds);\n\n        this.cellSize = this.minefieldBounds.width / gameWidth;\n    }\n\n    getCellCoordinatesByMouseLocation(mouseLocation: { x: number, y: number }): { x: number, y: number } | null {\n        const x = Math.floor((mouseLocation.x - this.minefieldBounds.x) / this.cellSize);\n        if (x < 0 || x >= this.gameSize.width) return null;\n\n        const y = Math.floor((mouseLocation.y - this.minefieldBounds.y) / this.cellSize);\n        if (y < 0 || y >= this.gameSize.height) return null;\n\n        return { x, y };\n    }\n\n    getCellBorderX(cellX: number): number {\n        return Math.floor(this.minefieldBounds.x + this.cellSize * cellX);\n    }\n\n    getCellBorderY(cellY: number): number {\n        return Math.floor(this.minefieldBounds.y + this.cellSize * cellY);\n    }\n\n    getCellBounds(cellX: number, cellY: number): { x: number, y: number, width: number, height: number } {\n        const x = this.getCellBorderX(cellX);\n        const y = this.getCellBorderY(cellY);\n\n        return {\n            x,\n            y,\n            width: this.getCellBorderX(cellX + 1) - x,\n            height: this.getCellBorderY(cellY + 1) - y,\n        };\n    }\n\n    private static fitRectangle(aspect: { width: number, height: number }, outerBounds: Rectangle) {\n        if (outerBounds.width * aspect.height < outerBounds.height * aspect.width) {\n            const correctedHeight = outerBounds.width * aspect.height / aspect.width;\n\n            return {\n                x: 0,\n                y: (outerBounds.height - correctedHeight) / 2,\n                width: outerBounds.width,\n                height: correctedHeight,\n            };\n        } else {\n            const correctedWidth = outerBounds.height * aspect.width / aspect.height;\n\n            return {\n                x: (outerBounds.width - correctedWidth) / 2,\n                y: 0,\n                width: correctedWidth,\n                height: outerBounds.height,\n            };\n        }\n    }\n}\n","import { Game, UnknownCell, OpenCell, CellCoords } from './game';\nimport { MinesweeperLayout, Rectangle } from './minesweeperLayout';\n\nexport class Renderer {\n    private readonly game: Game;\n    private readonly minefieldContainer: HTMLElement;\n    private readonly context: CanvasRenderingContext2D;\n    private layout!: MinesweeperLayout;\n    private mouseDownCell: CellCoords | null = null;\n    private isMouseCaptured = false;\n\n    constructor(game: Game, minefieldContainer: HTMLElement) {\n        this.game = game;\n\n        const canvas = document.createElement('canvas');\n        canvas.style.touchAction = 'manipulation';\n\n        const context = canvas.getContext('2d');\n        if (!context) throw 'Unable to obtain a 2D drawing context.';\n        this.context = context;\n\n        this.minefieldContainer = minefieldContainer;\n        minefieldContainer.appendChild(canvas);\n\n        window.addEventListener('resize', () => this.refreshCanvasLayout());\n        this.refreshCanvasLayout();\n\n        canvas.addEventListener('mousedown', ev => this.onMouseDown(ev));\n        canvas.addEventListener('mousemove', ev => this.onMouseMove(ev));\n        canvas.addEventListener('mouseup', ev => this.onMouseUp(ev));\n        canvas.addEventListener('dblclick', ev => this.onDoubleClick(ev));\n        canvas.addEventListener('contextmenu', ev => this.onContextMenu(ev), false);\n    }\n\n    private refreshCanvasLayout() {\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        const devicePixelWidth = this.minefieldContainer.clientWidth * devicePixelRatio;\n        const devicePixelHeight = this.minefieldContainer.clientHeight * devicePixelRatio;\n\n        if (this.layout\n            && this.layout.renderSize.width === devicePixelWidth\n            && this.layout.renderSize.height === devicePixelHeight) {\n            return;\n        }\n\n        this.layout = new MinesweeperLayout(devicePixelWidth, devicePixelHeight, this.game.width, this.game.height);\n        const canvas = this.context.canvas;\n        canvas.style.width = this.minefieldContainer.clientWidth + 'px';\n        canvas.style.height = this.minefieldContainer.clientHeight + 'px';\n        canvas.width = devicePixelWidth;\n        canvas.height = devicePixelHeight;\n        this.render();\n    }\n\n    private onContextMenu(ev: MouseEvent) {\n        ev.preventDefault();\n        if (this.game.conclusion) return;\n\n        const coords = this.getCellByMouseLocation(ev);\n\n        if (coords && this.game.tryToggleMark(coords.x, coords.y))\n            this.render();\n    }\n\n    private onMouseDown(ev: MouseEvent) {\n        if (this.game.conclusion) return;\n\n        if (ev.button === 0) {\n            this.isMouseCaptured = true;\n            this.updateMouseDownCell(ev);\n        }\n\n        // Right-click is already handled by the contextmenu event which is the only way to get long presses working in\n        // touch interfaces, synced to the haptic feedback. Haven’t found a good way to distinguish right-click from\n        // long press. Waiting until mouseup to mark the cell is at least consistent with how left-click behaves.\n    }\n\n    private onMouseMove(ev: MouseEvent) {\n        if (this.isMouseCaptured)\n            this.updateMouseDownCell(ev);\n    }\n\n    private onMouseUp(ev: MouseEvent) {\n        if (ev.button === 0) {\n            this.isMouseCaptured = false;\n\n            if (this.mouseDownCell) {\n                this.game.tryOpen(this.mouseDownCell.x, this.mouseDownCell.y);\n                this.mouseDownCell = null;\n                this.render();\n            }\n        }\n    }\n\n    private onDoubleClick(ev: MouseEvent) {\n        if (this.game.conclusion) return;\n\n        if (ev.button === 0) {\n            const coords = this.getCellByMouseLocation(ev);\n\n            if (coords && this.game.openSurroundingIfSatisfied(coords.x, coords.y))\n                this.render();\n        }\n    }\n\n    private updateMouseDownCell(ev: MouseEvent) {\n        const coords = this.getCellByMouseLocation(ev);\n\n        if (!Renderer.areSame(coords, this.mouseDownCell)) {\n            this.mouseDownCell = coords;\n            this.render();\n        }\n    }\n\n    private static areSame(first: CellCoords | null, second: CellCoords | null) {\n        if (!first) return !second;\n        if (!second) return false;\n        return first.x === second.x && first.y === second.y;\n    }\n\n    private getCellByMouseLocation(ev: MouseEvent) {\n        const devicePixelRatio = window.devicePixelRatio || 1;\n\n        return this.layout.getCellCoordinatesByMouseLocation({\n            x: ev.offsetX * devicePixelRatio,\n            y: ev.offsetY * devicePixelRatio,\n        });\n    }\n\n    render(): void {\n        const { renderSize, minefieldBounds, cellSize } = this.layout;\n\n        this.context.clearRect(0, 0, renderSize.width, renderSize.height);\n\n        this.context.fillStyle = '#d0d0d0';\n        this.context.fillRect(minefieldBounds.x, minefieldBounds.y, minefieldBounds.width, minefieldBounds.height);\n\n        this.context.strokeStyle = '#a0a0a0';\n\n        for (let y = 0; y < this.game.height; y++) {\n            const pixelY = this.layout.getCellBorderY(y);\n            this.context.beginPath();\n            this.context.moveTo(minefieldBounds.x, pixelY);\n            this.context.lineTo(minefieldBounds.x + minefieldBounds.width, pixelY);\n            this.context.stroke();\n        }\n\n        for (let x = 0; x < this.game.width; x++) {\n            const pixelX = this.layout.getCellBorderX(x);\n            this.context.beginPath();\n            this.context.moveTo(pixelX, minefieldBounds.y);\n            this.context.lineTo(pixelX, minefieldBounds.y + minefieldBounds.height);\n            this.context.stroke();\n        }\n\n        this.context.font = 'bold ' + (cellSize * 0.5) + 'px Georgia';\n\n        for (let y = 0; y < this.game.height; y++) {\n            for (let x = 0; x < this.game.width; x++) {\n                this.drawCell({ x, y }, this.layout.getCellBounds(x, y), cellSize);\n            }\n        }\n    }\n\n    private drawCell(coords: CellCoords, cellBounds: Rectangle, cellSize: number) {\n        const { x, y } = coords;\n\n        const isMouseDown = this.mouseDownCell && this.mouseDownCell.x === x && this.mouseDownCell.y === y;\n\n        const cell = this.game.getCellAt(x, y);\n\n        if (cell instanceof UnknownCell && (cell.marked || !isMouseDown)) {\n            const borderSize = cellSize * 0.1;\n\n            const right = cellBounds.x + cellBounds.width;\n            const bottom = cellBounds.y + cellBounds.height;\n\n            this.context.beginPath();\n            this.context.moveTo(cellBounds.x, cellBounds.y);\n            this.context.lineTo(cellBounds.x, bottom);\n            this.context.lineTo(cellBounds.x + borderSize, bottom - borderSize);\n            this.context.lineTo(cellBounds.x + borderSize, cellBounds.y + borderSize);\n            this.context.lineTo(right - borderSize, cellBounds.y + borderSize);\n            this.context.lineTo(right, cellBounds.y);\n            this.context.closePath();\n            this.context.fillStyle = '#e8e8e8';\n            this.context.fill();\n\n            this.context.beginPath();\n            this.context.moveTo(right, bottom);\n            this.context.lineTo(right, cellBounds.y);\n            this.context.lineTo(right - borderSize, cellBounds.y + borderSize);\n            this.context.lineTo(right - borderSize, bottom - borderSize);\n            this.context.lineTo(cellBounds.x + borderSize, bottom - borderSize);\n            this.context.lineTo(cellBounds.x, bottom);\n            this.context.closePath();\n            this.context.fillStyle = '#a0a0a0';\n            this.context.fill();\n        }\n\n        const text\n            = cell instanceof UnknownCell ? (cell.marked ? '🚩' : null)\n                : cell instanceof OpenCell ? (cell.mineCount !== 0 ? cell.mineCount.toString() : null)\n                    : '💥';\n\n        if (text !== null) {\n            if (cell instanceof OpenCell)\n                this.context.fillStyle = ['blue', 'green', '#e00', 'darkblue', 'brown', 'darkcyan', 'black', 'gray'][cell.mineCount - 1];\n\n            this.drawCenteredText(text, cellBounds);\n        }\n    }\n\n    private drawCenteredText(text: string, bounds: Rectangle) {\n        const metrics = this.context.measureText(text);\n        this.context.textBaseline = 'middle';\n        this.context.fillText(text, bounds.x + (bounds.width - metrics.width) / 2, bounds.y + bounds.height / 2);\n    }\n}\n","import { Game } from './game';\nimport { Renderer } from './renderer';\n\nconst game = new Game(30, 16, 99);\n\nnew Renderer(game, document.getElementById('minefield-container')!);\n"],"names":["$2e92403bce29b46a918202550d115a32$export$UnknownCell","constructor","marked","$2e92403bce29b46a918202550d115a32$export$OpenCell","mineCount","$2e92403bce29b46a918202550d115a32$export$ExplodedCell","$23af8fb40e559621211ce5e7978d6575$export$MinesweeperLayout","renderWidth","renderHeight","gameWidth","gameHeight","this","renderSize","width","height","gameSize","outerBounds","x","y","aspect","minefieldBounds","fitRectangle","cellSize","getCellCoordinatesByMouseLocation","mouseLocation","Math","floor","getCellBorderX","cellX","getCellBorderY","cellY","getCellBounds","correctedHeight","correctedWidth","$d5c515c9088c2e75424cb2ee5a8c3700$export$Renderer","mouseDownCell","isMouseCaptured","game","minefieldContainer","canvas","document","createElement","style","touchAction","context","getContext","appendChild","window","addEventListener","refreshCanvasLayout","ev","onMouseDown","onMouseMove","onMouseUp","onDoubleClick","onContextMenu","devicePixelRatio","devicePixelWidth","clientWidth","devicePixelHeight","clientHeight","layout","render","preventDefault","conclusion","coords","getCellByMouseLocation","tryToggleMark","button","updateMouseDownCell","tryOpen","openSurroundingIfSatisfied","areSame","first","second","offsetX","offsetY","clearRect","fillStyle","fillRect","strokeStyle","pixelY","beginPath","moveTo","lineTo","stroke","pixelX","font","drawCell","cellBounds","isMouseDown","cell","getCellAt","borderSize","right","bottom","closePath","fill","text","toString","drawCenteredText","bounds","metrics","measureText","textBaseline","fillText","$a2505262734fea44d0b68b298d58c3a4$var$game","remainingToOpen","gameConclusion","stateMap","Array","mineMap","state","contents","undefined","initializeMines","explode","openKnownGoodCell","surroundingCoords","getSurroundingCoordinates","openable","markCount","i","length","push","guaranteedCell","plantedCount","random","abs","allSurrounding","surrounding","console","log","knownGoodCells","pop","concat","coordinates","getElementById"],"version":3,"file":"index.9bcaf319.js.map"}